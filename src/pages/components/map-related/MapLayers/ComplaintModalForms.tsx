import { allComplaintFields, ComplainteField } from './ComplaintModalFields'

export const complaintTypes = [
  'other',
  'no_ride',
  'no_stop',
  'delay',
  'overcrowded',
  'early',
  'add_or_remove_station',
  'add_new_line',
  'add_frequency',
  'driver_behavior',
  'cleanliness',
  'fine_appeal',
  'route_change',
  'line_switch',
  'station_signs',
  'ticketing_fares_discounts',
  // 'train_delay',
  // 'train_no_ride',
  // 'train_early',
  // 'train_driver_behavior',
  'debug',
] as const

export type ComplaintType = (typeof complaintTypes)[number]

export const complaintTypeMappings: Record<ComplaintType, ComplainteField> = {
  other: [],
  no_ride: [
    'eventTime',
    'wait',
    'route',
    'boardingStation',
    'busDirectionFrom',
    'busDirectionTo',
    'operator',
    'lineNumber',
    'licensePlate',
    'eventDate',
  ],
  no_stop: [
    'eventTime',
    'wait',
    'route',
    'boardingStation',
    'busDirectionFrom',
    'busDirectionTo',
    'operator',
    'lineNumber',
    'licensePlate',
    'eventDate',
  ],
  delay: [
    'eventTime',
    'wait',
    'route',
    'boardingStation',
    'busDirectionFrom',
    'busDirectionTo',
    'operator',
    'lineNumber',
    'licensePlate',
    'eventDate',
  ],
  overcrowded: [
    'eventTime',
    'wait',
    'route',
    'boardingStation',
    'busDirectionFrom',
    'busDirectionTo',
    'operator',
    'lineNumber',
    'licensePlate',
    'eventDate',
  ],
  early: [
    'eventTime',
    'wait',
    'route',
    'boardingStation',
    'busDirectionFrom',
    'busDirectionTo',
    'operator',
    'lineNumber',
    'licensePlate',
    'eventDate',
  ],
  add_or_remove_station: [
    'addRemoveStationReason',
    'boardingStation',
    'requestedStationAddress',
    'busDirectionFrom',
    'busDirectionTo',
    'operator',
    'lineActiveDate',
    'lineNumber',
  ],
  add_new_line: ['route'],
  add_frequency: [
    'addFrequencyReason',
    'eventTime',
    'wait',
    'boardingStation',
    'busDirectionFrom',
    'busDirectionTo',
    'eventDate',
    'operator',
    'lineNumber',
    'route',
  ],
  driver_behavior: [
    'eventTime',
    'wait',
    'boardingStation',
    'busDirectionFrom',
    'busDirectionTo',
    'willingToTestifyMOT',
    'willingToTestifyCourt',
    'operator',
    'eventDate',
    'licensePlate',
    'lineNumber',
    'route',
  ],
  cleanliness: [
    'eventTime',
    'busDirectionFrom',
    'busDirectionTo',
    'boardingStation',
    'operator',
    'eventDate',
    'licensePlate',
    'lineNumber',
    'route',
  ],
  fine_appeal: [
    'ravKavNumber',
    'operator',
    'eventDate',
    'eventTime',
    'boardingStation',
    'busDirectionFrom',
    'busDirectionTo',
    'lineNumber',
    'route',
  ],
  route_change: [
    'operator',
    'eventDate',
    'busDirectionFrom',
    'busDirectionTo',
    'lineNumber',
    'route',
  ],
  line_switch: ['busDirectionFrom', 'busDirectionTo'],
  station_signs: [
    'operator',
    'eventDate',
    'eventTime',
    'boardingLocality',
    'stationCatNum',
    'lineNumber',
  ],
  ticketing_fares_discounts: ['ravKavNumber'],
  debug: Object.keys(allComplaintFields).filter(
    (key) =>
      ![
        'firstName',
        'lastName',
        'id',
        'email',
        'phone',
        'description',
        'lineNumber',
        'route',
        'licensePlate',
      ].includes(key) || ['operator'].includes(key),
  ) as ComplainteField,
} as const

export const complaintList = complaintTypes.map((c) => ({ value: c, label: c }))
